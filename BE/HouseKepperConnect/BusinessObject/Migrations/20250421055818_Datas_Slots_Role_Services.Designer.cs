// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(PCHWFDBContext))]
    [Migration("20250421055818_Datas_Slots_Role_Services")]
    partial class Datas_Slots_Role_Services
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<int>("HouseKeeperID")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ApplicationID");

                    b.HasIndex("HouseKeeperID");

                    b.HasIndex("JobID");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("BusinessObject.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HousekeeperID")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("HousekeeperID");

                    b.HasIndex("JobID")
                        .IsUnique();

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BusinessObject.Models.Booking_Slots", b =>
                {
                    b.Property<int>("Booking_SlotsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Booking_SlotsId"));

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("IsCheckedIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedByFamily")
                        .HasColumnType("bit");

                    b.Property<int>("SlotID")
                        .HasColumnType("int");

                    b.HasKey("Booking_SlotsId");

                    b.HasIndex("BookingID");

                    b.HasIndex("SlotID");

                    b.ToTable("Booking_Slots");
                });

            modelBuilder.Entity("BusinessObject.Models.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromAccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToAccountID")
                        .HasColumnType("int");

                    b.HasKey("ChatID");

                    b.HasIndex("FromAccountID");

                    b.HasIndex("ToAccountID");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("BusinessObject.Models.Family", b =>
                {
                    b.Property<int>("FamilyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int?>("JobListed")
                        .HasColumnType("int");

                    b.Property<int?>("TotalApplicant")
                        .HasColumnType("int");

                    b.HasKey("FamilyID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Family");
                });

            modelBuilder.Entity("BusinessObject.Models.HouseKeeperSkill", b =>
                {
                    b.Property<int>("HouseKeeperSkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseKeeperSkillID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("HouseKeeperSkillID");

                    b.ToTable("HouseKeeperSkill");
                });

            modelBuilder.Entity("BusinessObject.Models.Housekeeper", b =>
                {
                    b.Property<int>("HousekeeperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HousekeeperID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("JobCompleted")
                        .HasColumnType("int");

                    b.Property<int>("JobsApplied")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VerifyID")
                        .HasColumnType("int");

                    b.Property<int?>("WorkType")
                        .HasColumnType("int");

                    b.HasKey("HousekeeperID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("VerifyID")
                        .IsUnique()
                        .HasFilter("[VerifyID] IS NOT NULL");

                    b.ToTable("Housekeeper");
                });

            modelBuilder.Entity("BusinessObject.Models.HousekeeperSkillMapping", b =>
                {
                    b.Property<int>("HousekeeperSkillMappingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HousekeeperSkillMappingID"));

                    b.Property<int>("HouseKeeperSkillID")
                        .HasColumnType("int");

                    b.Property<int>("HousekeeperID")
                        .HasColumnType("int");

                    b.HasKey("HousekeeperSkillMappingID");

                    b.HasIndex("HouseKeeperSkillID");

                    b.HasIndex("HousekeeperID");

                    b.ToTable("HousekeeperSkillMapping");
                });

            modelBuilder.Entity("BusinessObject.Models.Housekeeper_Violation", b =>
                {
                    b.Property<int>("HousekeeperViolationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HousekeeperViolationID"));

                    b.Property<int>("HousekeeperID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViolationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViolationID")
                        .HasColumnType("int");

                    b.HasKey("HousekeeperViolationID");

                    b.HasIndex("HousekeeperID");

                    b.HasIndex("ViolationID");

                    b.ToTable("Housekeeper_Violation");
                });

            modelBuilder.Entity("BusinessObject.Models.IDVerification", b =>
                {
                    b.Property<int>("VerifyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VerifyID"));

                    b.Property<string>("BackPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDNumber")
                        .HasColumnType("int");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("VerifyID");

                    b.ToTable("IDVerification");
                });

            modelBuilder.Entity("BusinessObject.Models.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FamilyID")
                        .HasColumnType("int");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobID");

                    b.HasIndex("FamilyID");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("BusinessObject.Models.JobDetail", b =>
                {
                    b.Property<int>("JobDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobDetailID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HousekeeperID")
                        .HasColumnType("int");

                    b.Property<bool>("IsOffered")
                        .HasColumnType("bit");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobDetailID");

                    b.HasIndex("HousekeeperID");

                    b.HasIndex("JobID")
                        .IsUnique();

                    b.ToTable("JobDetail");
                });

            modelBuilder.Entity("BusinessObject.Models.Job_Service", b =>
                {
                    b.Property<int>("Job_ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Job_ServiceId"));

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.HasKey("Job_ServiceId");

                    b.HasIndex("JobID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Job_Service");
                });

            modelBuilder.Entity("BusinessObject.Models.Job_Slots", b =>
                {
                    b.Property<int>("Job_SlotsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Job_SlotsId"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("SlotID")
                        .HasColumnType("int");

                    b.HasKey("Job_SlotsId");

                    b.HasIndex("JobID");

                    b.HasIndex("SlotID");

                    b.ToTable("Job_Slots");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<int>("NotificationsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationsID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationsID");

                    b.HasIndex("AccountID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("BusinessObject.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FamilyID")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("FamilyID");

                    b.HasIndex("JobID")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BusinessObject.Models.Payout", b =>
                {
                    b.Property<int>("PayoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayoutID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<int>("HousekeeperID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PayoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PayoutID");

                    b.HasIndex("BookingID")
                        .IsUnique();

                    b.HasIndex("HousekeeperID");

                    b.ToTable("Payout");
                });

            modelBuilder.Entity("BusinessObject.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FamilyID")
                        .HasColumnType("int");

                    b.Property<int>("HouseKeeperID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("FamilyID");

                    b.HasIndex("HouseKeeperID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Housekeeper"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Family"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleID = 4,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceTypeID")
                        .HasColumnType("int");

                    b.HasKey("ServiceID");

                    b.HasIndex("ServiceTypeID");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            Description = "",
                            Price = 75000m,
                            ServiceName = "Dọn dẹp",
                            ServiceTypeID = 1
                        },
                        new
                        {
                            ServiceID = 2,
                            Description = "",
                            Price = 120000m,
                            ServiceName = "Tổng vệ sinh nhà cửa",
                            ServiceTypeID = 1
                        },
                        new
                        {
                            ServiceID = 3,
                            Description = "",
                            Price = 150000m,
                            ServiceName = "Dọn dẹp sau sự kiện/tết",
                            ServiceTypeID = 1
                        },
                        new
                        {
                            ServiceID = 4,
                            Description = "",
                            Price = 95000m,
                            ServiceName = "Giữ trẻ tại nhà nguyên ngày",
                            ServiceTypeID = 2
                        },
                        new
                        {
                            ServiceID = 5,
                            Description = "",
                            Price = 95000m,
                            ServiceName = "Chăm sóc người cao tuổi tại nhà",
                            ServiceTypeID = 2
                        },
                        new
                        {
                            ServiceID = 6,
                            Description = "",
                            Price = 85000m,
                            ServiceName = "Nấu ăn theo bữa",
                            ServiceTypeID = 3
                        },
                        new
                        {
                            ServiceID = 7,
                            Description = "",
                            Price = 85000m,
                            ServiceName = "Nấu ăn theo tuần/tháng",
                            ServiceTypeID = 3
                        },
                        new
                        {
                            ServiceID = 8,
                            Description = "",
                            Price = 30000m,
                            ServiceName = "Giặt ủi",
                            ServiceTypeID = 4
                        },
                        new
                        {
                            ServiceID = 9,
                            Description = "",
                            Price = 10000m,
                            ServiceName = "Ủi quần áo",
                            ServiceTypeID = 4
                        },
                        new
                        {
                            ServiceID = 10,
                            Description = "",
                            Price = 60000m,
                            ServiceName = "Giặt hấp cao cấp",
                            ServiceTypeID = 4
                        },
                        new
                        {
                            ServiceID = 11,
                            Description = "",
                            Price = 75000m,
                            ServiceName = "Chăm sóc cây cảnh",
                            ServiceTypeID = 5
                        },
                        new
                        {
                            ServiceID = 12,
                            Description = "",
                            Price = 65000m,
                            ServiceName = "Tưới cây, cắt tỉa",
                            ServiceTypeID = 5
                        },
                        new
                        {
                            ServiceID = 13,
                            Description = "",
                            Price = 100000m,
                            ServiceName = "Tắm & cắt tỉa lông thú cưng",
                            ServiceTypeID = 5
                        },
                        new
                        {
                            ServiceID = 14,
                            Description = "",
                            Price = 120000m,
                            ServiceName = "Sửa chữa điện nước",
                            ServiceTypeID = 6
                        },
                        new
                        {
                            ServiceID = 15,
                            Description = "",
                            Price = 130000m,
                            ServiceName = "Sơn sửa nội thất nhỏ",
                            ServiceTypeID = 6
                        },
                        new
                        {
                            ServiceID = 16,
                            Description = "",
                            Price = 150000m,
                            ServiceName = "Thợ sửa chữa",
                            ServiceTypeID = 6
                        },
                        new
                        {
                            ServiceID = 17,
                            Description = "",
                            Price = 180000m,
                            ServiceName = "Giúp việc theo yêu cầu (dịch vụ VIP)",
                            ServiceTypeID = 7
                        },
                        new
                        {
                            ServiceID = 18,
                            Description = "",
                            Price = 100000m,
                            ServiceName = "Hỗ trợ vận chuyển đồ đạc nhẹ",
                            ServiceTypeID = 7
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeID"));

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceTypeID");

                    b.ToTable("ServiceType");

                    b.HasData(
                        new
                        {
                            ServiceTypeID = 1,
                            ServiceTypeName = "Dọn dẹp nhà cửa"
                        },
                        new
                        {
                            ServiceTypeID = 2,
                            ServiceTypeName = "Chăm sóc trẻ em/người cao tuổi"
                        },
                        new
                        {
                            ServiceTypeID = 3,
                            ServiceTypeName = "Nấu ăn tại nhà"
                        },
                        new
                        {
                            ServiceTypeID = 4,
                            ServiceTypeName = "Giặt ủi & chăm sóc quần áo"
                        },
                        new
                        {
                            ServiceTypeID = 5,
                            ServiceTypeName = "Chăm sóc sân vườn & thú cưng"
                        },
                        new
                        {
                            ServiceTypeID = 6,
                            ServiceTypeName = "Dịch vụ sửa chữa & bảo trì nhà cửa"
                        },
                        new
                        {
                            ServiceTypeID = 7,
                            ServiceTypeName = "Hỗ trợ đặc biệt"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Slot", b =>
                {
                    b.Property<int>("SlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotID"));

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlotID");

                    b.ToTable("Slot");

                    b.HasData(
                        new
                        {
                            SlotID = 1,
                            Time = "8H - 9H"
                        },
                        new
                        {
                            SlotID = 2,
                            Time = "9H - 10H"
                        },
                        new
                        {
                            SlotID = 3,
                            Time = "10H - 11H"
                        },
                        new
                        {
                            SlotID = 4,
                            Time = "11H - 12H"
                        },
                        new
                        {
                            SlotID = 5,
                            Time = "12H - 13H"
                        },
                        new
                        {
                            SlotID = 6,
                            Time = "13H - 14H"
                        },
                        new
                        {
                            SlotID = 7,
                            Time = "14H - 15H"
                        },
                        new
                        {
                            SlotID = 8,
                            Time = "15H - 16H"
                        },
                        new
                        {
                            SlotID = 9,
                            Time = "16H - 17H"
                        },
                        new
                        {
                            SlotID = 10,
                            Time = "17H - 18H"
                        },
                        new
                        {
                            SlotID = 11,
                            Time = "18H - 19H"
                        },
                        new
                        {
                            SlotID = 12,
                            Time = "19H - 20H"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.SupportRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int");

                    b.Property<string>("ReviewNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestID");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("ReviewedBy");

                    b.ToTable("SupportRequests");
                });

            modelBuilder.Entity("BusinessObject.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletID")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("AccountID");

                    b.HasIndex("WalletID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BusinessObject.Models.VerificationTask", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"));

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VerifyID")
                        .HasColumnType("int");

                    b.HasKey("TaskID");

                    b.HasIndex("AccountID");

                    b.HasIndex("VerifyID");

                    b.ToTable("VerificationTask");
                });

            modelBuilder.Entity("BusinessObject.Models.Violation", b =>
                {
                    b.Property<int>("ViolationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViolationID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ViolationID");

                    b.ToTable("Violation");
                });

            modelBuilder.Entity("BusinessObject.Models.Wallet", b =>
                {
                    b.Property<int>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OnHold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WalletID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("BusinessObject.Models.Withdraw", b =>
                {
                    b.Property<int>("WithdrawID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WithdrawID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOTPVerified")
                        .HasColumnType("bit");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPCreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OTPExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.HasKey("WithdrawID");

                    b.HasIndex("AccountID");

                    b.HasIndex("TransactionID")
                        .IsUnique();

                    b.ToTable("Withdraw");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.HasOne("BusinessObject.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Models.Application", b =>
                {
                    b.HasOne("BusinessObject.Models.Housekeeper", "HouseKepper")
                        .WithMany()
                        .HasForeignKey("HouseKeeperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseKepper");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BusinessObject.Models.Booking", b =>
                {
                    b.HasOne("BusinessObject.Models.Housekeeper", "Housekeeper")
                        .WithMany()
                        .HasForeignKey("HousekeeperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Job", "Job")
                        .WithOne("Booking")
                        .HasForeignKey("BusinessObject.Models.Booking", "JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Housekeeper");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BusinessObject.Models.Booking_Slots", b =>
                {
                    b.HasOne("BusinessObject.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("BusinessObject.Models.Chat", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("BusinessObject.Models.Family", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithOne("Family")
                        .HasForeignKey("BusinessObject.Models.Family", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Housekeeper", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithOne("Housekeeper")
                        .HasForeignKey("BusinessObject.Models.Housekeeper", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.IDVerification", "IDVerification")
                        .WithOne("Housekeeper")
                        .HasForeignKey("BusinessObject.Models.Housekeeper", "VerifyID");

                    b.Navigation("Account");

                    b.Navigation("IDVerification");
                });

            modelBuilder.Entity("BusinessObject.Models.HousekeeperSkillMapping", b =>
                {
                    b.HasOne("BusinessObject.Models.HouseKeeperSkill", "HouseKeeperSkill")
                        .WithMany()
                        .HasForeignKey("HouseKeeperSkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Housekeeper", "Housekeeper")
                        .WithMany()
                        .HasForeignKey("HousekeeperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseKeeperSkill");

                    b.Navigation("Housekeeper");
                });

            modelBuilder.Entity("BusinessObject.Models.Housekeeper_Violation", b =>
                {
                    b.HasOne("BusinessObject.Models.Housekeeper", "Housekeeper")
                        .WithMany()
                        .HasForeignKey("HousekeeperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Violation", "Violation")
                        .WithMany()
                        .HasForeignKey("ViolationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Housekeeper");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("BusinessObject.Models.Job", b =>
                {
                    b.HasOne("BusinessObject.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("BusinessObject.Models.JobDetail", b =>
                {
                    b.HasOne("BusinessObject.Models.Housekeeper", "Housekeeper")
                        .WithMany()
                        .HasForeignKey("HousekeeperID");

                    b.HasOne("BusinessObject.Models.Job", "Job")
                        .WithOne("JobDetail")
                        .HasForeignKey("BusinessObject.Models.JobDetail", "JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Housekeeper");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BusinessObject.Models.Job_Service", b =>
                {
                    b.HasOne("BusinessObject.Models.Job", "Job")
                        .WithMany("Job_Services")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessObject.Models.Job_Slots", b =>
                {
                    b.HasOne("BusinessObject.Models.Job", "Job")
                        .WithMany("Job_Slots")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Notification")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Payment", b =>
                {
                    b.HasOne("BusinessObject.Models.Family", "Family")
                        .WithMany("Payments")
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Job", "Job")
                        .WithOne("Payment")
                        .HasForeignKey("BusinessObject.Models.Payment", "JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BusinessObject.Models.Payout", b =>
                {
                    b.HasOne("BusinessObject.Models.Booking", "Booking")
                        .WithOne("Payout")
                        .HasForeignKey("BusinessObject.Models.Payout", "BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Housekeeper", "Housekeeper")
                        .WithMany("Payouts")
                        .HasForeignKey("HousekeeperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Housekeeper");
                });

            modelBuilder.Entity("BusinessObject.Models.Rating", b =>
                {
                    b.HasOne("BusinessObject.Models.Family", "Family")
                        .WithMany("Ratings")
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Housekeeper", "Housekeeper")
                        .WithMany("Ratings")
                        .HasForeignKey("HouseKeeperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Housekeeper");
                });

            modelBuilder.Entity("BusinessObject.Models.Service", b =>
                {
                    b.HasOne("BusinessObject.Models.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("BusinessObject.Models.SupportRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Requester")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewedBy");

                    b.Navigation("Requester");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("BusinessObject.Models.Transaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BusinessObject.Models.VerificationTask", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("BusinessObject.Models.IDVerification", "IDVerification")
                        .WithMany()
                        .HasForeignKey("VerifyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("IDVerification");
                });

            modelBuilder.Entity("BusinessObject.Models.Wallet", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("BusinessObject.Models.Wallet", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Withdraw", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Withdraws")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Transaction", "Transaction")
                        .WithOne("Withdraw")
                        .HasForeignKey("BusinessObject.Models.Withdraw", "TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Navigation("Family")
                        .IsRequired();

                    b.Navigation("Housekeeper")
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Wallet")
                        .IsRequired();

                    b.Navigation("Withdraws");
                });

            modelBuilder.Entity("BusinessObject.Models.Booking", b =>
                {
                    b.Navigation("Payout")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Models.Family", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BusinessObject.Models.Housekeeper", b =>
                {
                    b.Navigation("Payouts");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BusinessObject.Models.IDVerification", b =>
                {
                    b.Navigation("Housekeeper")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Models.Job", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Booking")
                        .IsRequired();

                    b.Navigation("JobDetail")
                        .IsRequired();

                    b.Navigation("Job_Services");

                    b.Navigation("Job_Slots");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Models.Transaction", b =>
                {
                    b.Navigation("Withdraw")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
