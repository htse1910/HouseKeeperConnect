package com.example.housekeeperapplication;

import android.app.AlertDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.DividerItemDecoration;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.housekeeperapplication.API.APIClient;
import com.example.housekeeperapplication.API.Interfaces.APIServices;
import com.example.housekeeperapplication.Adapter.ApplicantAdapter;
import com.example.housekeeperapplication.Model.DTOs.ApplicationDisplayDTO;
import com.example.housekeeperapplication.Model.DTOs.JobDetailPageDTO;
import com.example.housekeeperapplication.Model.Service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class JobDetailActivity extends AppCompatActivity {

    private TextView tvJobName, tvVerified, tvPostedDate, tvLocation, tvSalary,
            tvDayOfWeek, tvService, tvDescription;
    private Button btnConfirmSlotWorked, btnConfirmJobCompletion;
    private RecyclerView rvApplicants;
    private ApplicantAdapter applicantAdapter;
    private APIServices api;
    private int jobID;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_family_job_detail);

        api = APIClient.getClient(this).create(APIServices.class);
        jobID = getIntent().getIntExtra("jobID", -1);

        initViews();
        setupApplicantsRecyclerView();

        if (jobID != -1) {
            loadJobDetail(jobID);
            loadApplicants(jobID, 1, 10); // Page 1, 10 items per page
        } else {
            Toast.makeText(this, "Job ID kh√¥ng h·ª£p l·ªá", Toast.LENGTH_SHORT).show();
            finish();
        }
    }

    private void initViews() {
        tvJobName = findViewById(R.id.tvJobName);
        tvVerified = findViewById(R.id.tvVerified);
        tvPostedDate = findViewById(R.id.tvPostedDate);
        tvLocation = findViewById(R.id.tvLocation);
        tvSalary = findViewById(R.id.tvSalary);
        tvDayOfWeek = findViewById(R.id.tvDayOfWeek);
        tvService = findViewById(R.id.tvService);
        tvDescription = findViewById(R.id.tvDescription);
        btnConfirmSlotWorked = findViewById(R.id.btnConfirmSlotWorked);
        btnConfirmJobCompletion = findViewById(R.id.btnConfirmJobCompletion);
        rvApplicants = findViewById(R.id.rvApplicants);
    }

    private void setupApplicantsRecyclerView() {
        applicantAdapter = new ApplicantAdapter(new ArrayList<>(), new ApplicantAdapter.ApplicantClickListener() {
            @Override
            public void onItemClick(ApplicationDisplayDTO applicant) {
                Intent intent = new Intent(JobDetailActivity.this, ReviewProflieHousekeeperActivity.class);
                intent.putExtra("applicantID", applicant.getHousekeeperID());
                startActivity(intent);
            }
            @Override
            public void onAcceptClick(ApplicationDisplayDTO applicant, int position) {
            }

            @Override
            public void onRejectClick(ApplicationDisplayDTO applicant, int position) {
            }
        }, this);

        rvApplicants.setLayoutManager(new LinearLayoutManager(this));
        rvApplicants.setAdapter(applicantAdapter);

        // Th√™m divider gi·ªØa c√°c item (tu·ª≥ ch·ªçn)
        rvApplicants.addItemDecoration(new DividerItemDecoration(this, DividerItemDecoration.VERTICAL));
    }

    /*private void showConfirmationDialog(ApplicationDisplayDTO applicant, int position, boolean isAccept) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);

        String message = isAccept
                ? "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·∫•p nh·∫≠n ·ª©ng vi√™n " + applicant.getNickname() + "?"
                : "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ ch·ªëi ·ª©ng vi√™n " + applicant.getNickname() + "?";

        builder.setTitle("X√°c nh·∫≠n")
                .setMessage(message)
                .setCancelable(false) // NgƒÉn ng∆∞·ªùi d√πng ch·∫°m ra ngo√†i ƒë·ªÉ t·∫Øt dialog
                .setPositiveButton("X√°c nh·∫≠n", (dialog, which) -> {
                    if (isAccept) {
                        acceptApplicant(applicant, position);
                    } else {
                        rejectApplicant(applicant, position);
                    }
                    dialog.dismiss();
                })
                .setNegativeButton("H·ªßy", (dialog, which) -> {
                    // Kh√¥ng l√†m g√¨ c·∫£, ch·ªâ ƒë√≥ng dialog
                    dialog.dismiss();
                })
                .show();
    }*/


    private void acceptApplicant(ApplicationDisplayDTO applicant, int position) {
        // G·ªçi API ch·∫•p nh·∫≠n ·ª©ng vi√™n
        api.UpdateApplication(applicant.getApplicationID(), 2).enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    Toast.makeText(JobDetailActivity.this, "ƒê√£ ch·∫•p nh·∫≠n ·ª©ng vi√™n th√†nh c√¥ng", Toast.LENGTH_SHORT).show();

                    // C·∫≠p nh·∫≠t giao di·ªán
                    applicant.setStatus(2); // 2 = Accepted
                    applicantAdapter.notifyItemChanged(position);

                    // T·∫£i l·∫°i danh s√°ch ·ª©ng vi√™n
                    loadApplicants(jobID, 1, 10);
                } else {
                    Toast.makeText(JobDetailActivity.this, "L·ªói khi ch·∫•p nh·∫≠n ·ª©ng vi√™n", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                Toast.makeText(JobDetailActivity.this, "L·ªói k·∫øt n·ªëi: " + t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void rejectApplicant(ApplicationDisplayDTO applicant, int position) {
        // G·ªçi API t·ª´ ch·ªëi ·ª©ng vi√™n
        api.UpdateApplication(applicant.getApplicationID(), 3).enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    Toast.makeText(JobDetailActivity.this, "ƒê√£ t·ª´ ch·ªëi ·ª©ng vi√™n th√†nh c√¥ng", Toast.LENGTH_SHORT).show();

                    // X√≥a ·ª©ng vi√™n kh·ªèi danh s√°ch
                    applicantAdapter.removeApplicant(position);
                } else {
                    Toast.makeText(JobDetailActivity.this, "L·ªói khi t·ª´ ch·ªëi ·ª©ng vi√™n", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                Toast.makeText(JobDetailActivity.this, "L·ªói k·∫øt n·ªëi: " + t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void loadJobDetail(int jobID) {
        api.getFullJobDetailByID(jobID).enqueue(new Callback<JobDetailPageDTO>() {
            @Override
            public void onResponse(Call<JobDetailPageDTO> call, Response<JobDetailPageDTO> response) {
                if (response.isSuccessful() && response.body() != null) {
                    updateJobDetailUI(response.body());
                    if (response.body().serviceIDs != null && !response.body().serviceIDs.isEmpty()) {
                        loadService(response.body().serviceIDs.get(0)); // Load service name
                    }
                } else {
                    Toast.makeText(JobDetailActivity.this, "Kh√¥ng t·∫£i ƒë∆∞·ª£c chi ti·∫øt c√¥ng vi·ªác", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<JobDetailPageDTO> call, Throwable t) {
                Toast.makeText(JobDetailActivity.this, "L·ªói: " + t.getMessage(), Toast.LENGTH_SHORT).show();
                Log.e("JobDetail", t.getMessage());
            }
        });
    }

    private void updateJobDetailUI(JobDetailPageDTO job) {
        tvJobName.setText(job.jobName != null ? job.jobName : "");
        tvVerified.setText(getJobStatusString(job.status));
        tvPostedDate.setText("üìÖ ƒêƒÉng v√†o: " + formatDate(job.startDate));
        tvLocation.setText("üìç " + (job.location != null ? job.location : ""));
        tvSalary.setText("M·ª©c l∆∞∆°ng: " + String.format("%,d", job.price) + " VNƒê");

        // Format ng√†y l√†m vi·ªác
        StringBuilder daysText = new StringBuilder();
        if (job.dayofWeek != null) {
            for (Integer day : job.dayofWeek) {
                daysText.append("‚Ä¢ ").append(getWeekday(day)).append("\n");
            }
        }
        tvDayOfWeek.setText(daysText.toString().trim());
        tvDescription.setText("M√¥ t·∫£ c√¥ng vi·ªác: " + (job.description != null ? job.description : ""));
    }

    private String getJobStatusString(int status) {
        switch (status) {
            case 1: return "üïí ƒêang ch·ªù";
            case 2: return "‚úîÔ∏è ƒê√£ x√°c minh";
            case 3: return "üìå ƒê√£ ch·∫•p nh·∫≠n";
            case 4: return "‚úÖ Ho√†n th√†nh";
            case 5: return "‚è∞ H·∫øt h·∫°n";
            case 6: return "‚ùå ƒê√£ h·ªßy";
            default: return "‚ùì Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh";
        }
    }

    private String getWeekday(int day) {
        switch (day) {
            case 0: return "Ch·ªß Nh·∫≠t";
            case 1: return "Th·ª© Hai";
            case 2: return "Th·ª© Ba";
            case 3: return "Th·ª© T∆∞";
            case 4: return "Th·ª© NƒÉm";
            case 5: return "Th·ª© S√°u";
            case 6: return "Th·ª© B·∫£y";
            default: return "Th·ª© ?";
        }
    }

    private void loadService(int serviceID) {
        api.getServiceByID(serviceID).enqueue(new Callback<Service>() {
            @Override
            public void onResponse(Call<Service> call, Response<Service> response) {
                if (response.isSuccessful() && response.body() != null) {
                    tvService.setText(response.body().getServiceName());
                }
            }

            @Override
            public void onFailure(Call<Service> call, Throwable t) {
                Log.e("Service", "Failed to load service name", t);
            }
        });
    }

    private void loadApplicants(int jobID, int pageNumber, int pageSize) {
        api.ApplicationListByJob(jobID, pageNumber, pageSize).enqueue(new Callback<List<ApplicationDisplayDTO>>() {
            @Override
            public void onResponse(Call<List<ApplicationDisplayDTO>> call, Response<List<ApplicationDisplayDTO>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    applicantAdapter.updateData(response.body());
                } else {
                    Toast.makeText(JobDetailActivity.this, "Kh√¥ng c√≥ ·ª©ng vi√™n n√†o", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<ApplicationDisplayDTO>> call, Throwable t) {
                Toast.makeText(JobDetailActivity.this, "L·ªói t·∫£i danh s√°ch ·ª©ng vi√™n", Toast.LENGTH_SHORT).show();
                Log.e("Applicants", t.getMessage());
            }
        });
    }

    private String formatDate(String rawDate) {
        if (rawDate == null || !rawDate.contains("T")) return rawDate;
        return rawDate.split("T")[0];
    }
}